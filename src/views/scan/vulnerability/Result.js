import React, { useState } from 'react';
import { useEffect } from 'react';
import axiosClient from '../../../axiosClient';
import { Link, useLocation } from 'react-router-dom';
import queryString from 'query-string';
import { Row, Col, Card, Table, Button, Form } from 'react-bootstrap';
import { StopIcon, InfoIcon, DeleteIcon } from '../../../components/Icon/Icon';
import Modal from 'react-bootstrap/Modal';


function Result() {
  const { search } = useLocation();
  // console.log(search);
  const values = queryString.parse(search);
  // console.log(values);
  // console.log(values.target_id);
  const [listResults, setlistResults] = useState([]);
  const [id, setId] = useState();
  const [ref, setref] = useState();
  const [showDownload, setShowDownload] = useState(false);
  const handleCloseDownload = () => setShowDownload(false);
  function getId(id) {
    setShowDownload(true);
    setId(id);
    console.log(id)
  }
  const [nameReport, setNameReport] = useState()

  useEffect(() => {
    async function getItem() {
      const url = values.target_id ? `targets/${values.target_id}/scans` : 'scans';
      const res = await axiosClient.get(url);

      // console.log(res.data.items);
      setlistResults((listResults) => [...res.data.items]);
      // console.log(listResults);
    }
    getItem();
  }, [values.target_id]);
  function playScan(id) {
    console.log(id);
    const res = axiosClient.get(`/scans/${id}/start`);
    console.log(res);
  }
  async function createReport() {
    console.log(nameReport)
    const data = {scan_id:id,
      public:"true",
      name:nameReport
    };
    console.log(data);
    axiosClient.post("/reports/manager", data).then(res=>{
      if(res.status === 200){
        alert("Tạo báo cáo thành công");
        handleCloseDownload();
      }

    })
  }
  async function downloadReport() {
    console.log(nameReport);
    const data = {
      scan_id: id,
      public: "true",
      name: nameReport,
    };
    console.log(data);
    axiosClient
      .post("/reports/manager", data)
      .then((res) => {
        console.log(res);
        const match = res.data.message.match(/\b\w+\.pdf\b/);
        if (match) {
          axiosClient.get(`/reports/manager/${match[0]}`, { responseType: 'blob' })
          .then(res => {
            // Tải tệp tin
            const url = window.URL.createObjectURL(new Blob([res.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', nameReport);
            document.body.appendChild(link);
            link.click();
          })
          .catch(err => console.error(err));
          }
        })
  }


  return (
    <React.Fragment>
       <Modal show={showDownload} onHide={handleCloseDownload}>
        <Modal.Header closeButton>
          <Modal.Title>Nhập tên báo cáo</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <div className="form-group">
              <label>Tên</label>
              <input 
              className="form-control url" 
              placeholder="minh10.pdf"
              value={nameReport}
              onChange={(e) => setNameReport(e.target.value)} />
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary"   onClick={(e) => createReport()}>
            Lưu
          </Button>
          <Button variant="primary" onClick={(e) => downloadReport()}>Tải xuống</Button>
        </Modal.Footer>
      </Modal>
      <Row>
        <Col>
          <Card>
            <Card.Header>
              <Row>
                <Card.Title as="h5">Danh sách rà soát</Card.Title>

                <Link
                  title="Thêm rà soát mới"
                  to={'/scan/vulnerability/addScan'}
                  className="feather icon-plus-circle text-primary f-15 m-r-5"
                  style={{ fontSize: '20px' }}
                ></Link>
              </Row>
            </Card.Header>
            <Card.Body>
              <Table responsive hover>
                <thead>
                  <tr>
                    <th className="border-0">ID</th>
                    <th className="border-0">Tên miền</th>
                    <th className="border-0">Trạng thái</th>
                    <th className="border-0">Thời gian</th>
                    <th className="border-0">Kết quả rà soát</th>
                    <th className="border-0"></th>
                  </tr>
                </thead>
                <tbody>
                  {listResults &&
                    listResults.map((item) => {
                      return (
                        <tr key={item.id}>
                          <td>{item.id}</td>
                          <td>{item.address}</td>
                          <td className={String(item.status) === 'success' ? 'text-success' : 'text-warning'}>{String(item.status)}</td>
                          {/* <td>{String(item.status)}</td> */}
                          <td>{item.created_at}</td>
                          <tr style={{ backgroundColor: '#f2f2f200' }}>
                            <button
                              type="button"
                              style={{ borderRadius: '50%', padding: '4px 10px', marginTop: 10 }}
                              title="Nguy hiểm cao"
                              class="btn btn-danger btn-circle btn-sm"
                            >
                              {item.high}
                            </button>

                            <button
                              type="button"
                              style={{ borderRadius: '50%', padding: '4px 10px', marginTop: 10 }}
                              title="Nguy hiểm trung bình"
                              class="btn btn-warning btn-circle btn-sm"
                            >
                              {item.medium}
                            </button>
                            <button
                              type="button"
                              style={{ borderRadius: '50%', padding: '4px 10px', marginTop: 10 }}
                              title="Nguy hiểm thấp"
                              class="btn btn-primary btn-circle btn-sm"
                            >
                              {item.low}
                            </button>
                            <button
                              type="button"
                              style={{ borderRadius: '50%', padding: '4px 10px', marginTop: 10 }}
                              title="Nguy cơ"
                              class="btn btn-success btn-circle btn-sm"
                            >
                              {item.information}
                            </button>
                          </tr>
                          <td>
                            {/* <div style={{display: "flex", gap: 4, justifyContent: "space-between"}}> 
                               <span style ={{cursor:"pointer"}}><StopIcon fill={item.is_running?"black":"#D0D2D6"} /></span>
                               <Link to={`/scan/vulnerability/vulnerability?task_id=${item.id}`}><InfoIcon/></Link>
                               <span style ={{cursor:"pointer"}}><DeleteIcon/></span>
                               </div> */}
                            <Row>
                              <p
                                onClick={(e) => playScan(item.id)}
                                className={
                                  String(item.status) === 'success'
                                    ? 'feather icon-refresh-ccw text-primary f-15 m-r-5'
                                    : String(item.status) === 'waiting'
                                    ? 'feather icon-play text-primary f-15 m- clr-5'
                                    : String(item.status) === 'running'
                                    ? 'feather icon-square text-primary f-15 m-r-5'
                                    : 'feather icon-play text-primary f-15 m- clr-5'
                                }
                                title={
                                  String(item.status) === 'success'
                                    ? 'Bắt đầu rà soát'
                                    : String(item.status) === 'waiting'
                                    ? 'Bỏ qua'
                                    : String(item.status) === 'running'
                                    ? 'Dừng lại'
                                    : 'Bỏ qua'
                                }
                                style={{ cursor: 'pointer' }}
                              ></p>
                              <Link
                                title="Chi tiết lỗ hổng"
                                to={`/scan/vulnerability/vulnerability?task_id=${item.id}`}
                                className="feather icon-info text-success f-15 m-r-5"
                              ></Link>
                              {String(item.status) === 'success' && (
                                <p
                                onClick={(e) => getId(item.id)}                                   
                                className={'feather icon-download text-warning f-15 m-r-5'}
                                title="Tải xuống"
                                  style={{ cursor: 'pointer' }}
                                ></p>
                              )}
                              {String(item.status) === 'success' && (
                                <p
                                  onClick={(e) => playScan(item.id)}
                                  className={'feather icon-trash text-danger f-15 m-r-5'}
                                  // {/* className="feather icon-play text-primary f-15 m- clr-5" */}
                                  title="Xóa"
                                  style={{ cursor: 'pointer' }}
                                ></p>
                              )}
                            </Row>
                          </td>
                        </tr>
                      );
                    })}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </React.Fragment>
  );
}

export default Result;
