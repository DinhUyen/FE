import React, { useState } from 'react';
import Modal from 'react-bootstrap/Modal';
import { useEffect } from 'react';
import axiosClient from '../../../axiosClient';
import { Link, useLocation } from 'react-router-dom';
import queryString from 'query-string';
import { Badge, Button, Card, Navbar, Nav, Table, Container, Row, Col, Pagination } from 'react-bootstrap';
function Vulnerability() {
  const [url, setUrl] = useState();
  const [severity, setSevirity] = useState();
  const { search } = useLocation();
  const [isShow, setIsShow] = useState(false);
  const [data, setData] = useState(1);
  // console.log(search);
  const values = queryString.parse(search);
  // console.log(values);
  // console.log(values.task_id);
  const [listVulnerabilities, setlistVulnerabilities] = useState([]);
  const [show, setShow] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);
  const [id, setId] = useState();
  const [detail, setDetail] = useState();
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  useEffect(() => {
    async function getItem() {
      const url = `scans/${values.task_id}/vulnerabilities`;
      const res = await axiosClient.get(url);

      // console.log(res.data.items);
      setlistVulnerabilities((listVulnerabilities) => [...res.data.items]);
      // console.log(listVulnerabilities);
    }
    getItem();
  }, [values.task_id]);
  const [listItems, setListItem] = useState(null);
  async function getId(id) {
    setShow(true);
    setId(id);
    const res = await axiosClient.get(`/vulnerabilities/${id}`);
    console.log(res.data);
    setDetail(res.data);
    console.log('detail', detail);
  }
  const paginate = (vulnerabilities) => {
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    return vulnerabilities.slice(startIndex, endIndex);
  };

  return (
    <>
      <Modal show={show} onHide={handleClose} size="lg" scrollable={true}>
        <Modal.Header closeButton>
          <Modal.Title>Chi tiết lỗ hổng</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Col md="12">
          <Card className="strpied-tabled-with-hover">
              <Card.Body className="table-full-width table-responsive px-0">
                <Table className="table-hover table-striped">
                  <thead>
                    <tr>
                      <th className="border-0">Thuộc tính</th>
                      <th className="border-0">Nội dung</th>
                    </tr>
                  </thead>
                  <tbody>
                  {detail && Object.entries(detail).map(([key, value]) => {
                      return (
                        <tr>
                          <td>{key}</td>
                          <td style={{ whiteSpace: "pre-wrap" }}>{value}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </Table>
              </Card.Body>
            </Card>
          </Col>
        </Modal.Body>
        <Modal.Footer></Modal.Footer>
      </Modal>
      <Container fluid>
        <Row>
          <Col>
            <Card>
              <Card.Body>
                <div>
                  <Row>
                    <div className="font-icon-detail icon-vul">
                      <i className="nc-icon nc-preferences-circle-rotate"></i>
                    </div>

                    <div className="col-md-5">
                      <input
                        type="text"
                        className="form-control"
                        placeholder="Website URL (e.g.. yourdomain.com)"
                        value={url}
                        onChange={(e) => setUrl(e.target.value)}
                      />
                    </div>
                    <div className="col-md-5">
                      <input
                        type="text"
                        className="form-control"
                        placeholder="Severity"
                        value={severity}
                        onChange={(e) => setSevirity(e.target.value)}
                      />
                    </div>
                  </Row>
                </div>
                <div className="form-group"></div>
                <div></div>
              </Card.Body>
            </Card>
          </Col>
        </Row>
        <Row>
          <Col>
            <Card className="strpied-tabled-with-hover">
              <Card.Body className="table-full-width table-responsive px-0">
                <Table responsive hover>
                  <thead>
                    <tr>
                      <th className="border-0">ID</th>
                      <th className="border-1">Url</th>
                      <th className="border-2">Severity</th>
                    </tr>
                  </thead>
                  <tbody>
                  {paginate(listVulnerabilities).map((item) => {
                        return (
                          <tr key={item.id} onClick={() => getId(item.id)}>
                            <td>
                              {item.id}
                            </td>
                            <td>{item.name}</td>
                            <td className={item.severity === 'medium' ?  'text-primary' : item.severity === 'low'? 'text-success':item.severity==='information'? 'text-warning':'text-danger'}>{item.severity}</td>
                          </tr>
                        );
                      })}
                  </tbody>
                </Table>
                <div className="d-flex justify-content-center">
                <Pagination>
                  {currentPage > 1 && (
                    <Pagination.Prev onClick={() => setCurrentPage(currentPage - 1)} />
                  )}
                  {currentPage > 2 && (
                    <Pagination.Ellipsis
                      onClick={() => setCurrentPage(Math.floor(currentPage / 2))}
                    />
                  )}
                  {[...Array(Math.ceil(listVulnerabilities.length / pageSize)).keys()].map(
                    (number) =>
                      Math.abs(currentPage - (number + 1)) <= 2 && (
                        <Pagination.Item
                          key={number}
                          active={currentPage === number + 1}
                          onClick={() => setCurrentPage(number + 1)}
                        >
                          {number + 1}
                        </Pagination.Item>
                      )
                  )}
                  {currentPage <
                    Math.ceil(listVulnerabilities.length / pageSize) - 1 && (
                      <Pagination.Ellipsis
                        onClick={() =>
                          setCurrentPage(
                            Math.ceil(
                              (currentPage +
                                Math.ceil(listVulnerabilities.length / pageSize)) /
                              2
                            )
                          )
                        }
                      />
                    )}
                  {currentPage <
                    Math.ceil(listVulnerabilities.length / pageSize) && (
                      <Pagination.Next onClick={() => setCurrentPage(currentPage + 1)} />
                    )}
                </Pagination>
              </div>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>
    </>
  );
}

export default Vulnerability;
